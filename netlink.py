#!/usr/bin/env python2

import os
import socket
import struct

from dumpdata import dumpData

# NL_PROTOCOL  = socket.NETLINK_USERSOCK
NL_PROTOCOL  = 25
NL_GROUP_ALL = 1

rxPktCount = 0
txPktCount = 0

'''
rawdata is used as test packet to be sent to kernel netlink driver
'''
rawdata=          '\x01\x00\x5e\x00\x00\x16\x24\x8a\x07\xa4\x6b\x89\x08\x00\x46\xc0'
rawdata=rawdata + '\x00\x28\x00\x00\x40\x00\x01\x02\xda\x81\x0a\x14\x1f\x64\xe0\x00'
rawdata=rawdata + '\x00\x16\x94\x04\x00\x00\x22\x00\xe9\xf9\x00\x00\x00\x01\x03\x00'
rawdata=rawdata + '\x00\x00\xef\x01\x02\x03\x55\xaa\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x01\x00\x5e\x00\x00\x16\x24\x8a\x07\xa4\x6b\x89\x08\x00\x46\xc0'
rawdata=rawdata + '\x00\x28\x00\x00\x40\x00\x01\x02\xda\x81\x0a\x14\x1f\x64\xe0\x00'
rawdata=rawdata + '\x00\x16\x94\x04\x00\x00\x22\x00\xe9\xf9\x00\x00\x00\x01\x03\x00'
rawdata=rawdata + '\x00\x00\xef\x01\x02\x03\x55\xaa\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x00\x01\x02\x03\x04\x05\x06\x07'
rawdata=rawdata + '\x01\x00\x5e\x00\x00\x16\x24\x8a\x07\xa4\x6b\x89\x08\x00\x46\xc0'
rawdata=rawdata + '\x00\x28\x00\x00\x40\x00\x01\x02\xda\x81\x0a\x14\x1f\x64\xe0\x00'

def openNetlink():
    # Create the netlink socket and bind to NL_PROTOCOL,
    s = socket.socket(socket.AF_NETLINK, socket.SOCK_RAW, NL_PROTOCOL)
    # set timeout to 1.0 seconds
    s.settimeout(1.0)
    # bind to current pid
    s.bind((os.getpid(), NL_GROUP_ALL))
    return s

def recvData(s):
    global rxPktCount
    try:
        data = s.recv(8192)
	if len(data) > 0:
	    rxPktCount += 1
	    print "RX Packet %d:" % rxPktCount
	    dumpData(data)
    except socket.timeout:
        pass

def sendData(s, data):
    addr = (0, NL_GROUP_ALL)
    rc = s.sendto(data, addr);

def recvLoop(loop):    
    s = openNetlink()
    while loop > 0:
        loop -= 1;
        recvData(s)
    s.close()


def sendLoop(loop):
    s = openNetlink()
    while loop > 0:
        loop -= 1;
        sendData(s, rawdata)
    s.close()


'''
default behavior is to receive packet from kernel netlink driver
'''
if __name__ == "__main__":
    try:
        recvLoop(1000)
        #sendLoop(1000)
    except KeyboardInterrupt:
        print "==== Total RX Packet Count: %d" % rxPktCount
        pass

